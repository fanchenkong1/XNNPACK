// Copyright 2024 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert DATATYPE in ["QC8", "QD8_F32"]
$assert NR == 4 or NR == 8
$assert DATATYPE == "QD8_F32" or REQUANTIZATION == "FP32"
$assert DATATYPE != "QD8_F32" or not REQUANTIZATION
#include <assert.h>

#include <wasm_simd128.h>

#include "xnnpack/gemm.h"
#include "xnnpack/math.h"

$DATATYPE_SPEC = {"QC8": "qs8_qc8w", "QD8_F32": "qd8_f32_qc8w"}[DATATYPE]
$REQUANTIZATION_SPEC = "_" + REQUANTIZATION.lower() if REQUANTIZATION else ""
$PARAMS_UNION = {"QC8": "xnn_qs8_qc8w_conv_minmax_params", "QD8_F32": "xnn_f32_minmax_params"}[DATATYPE]
$OUT_T = "float" if DATATYPE == "QD8_F32" else "int8_t"
void xnn_${DATATYPE_SPEC}_gemm_minmax${REQUANTIZATION_SPEC}_ukernel_${MR}x${NR}c4__wasm${"sdot" if SDOT else "usdot"}${"_u2" if UNROLL else ""}(
    size_t mr,
    size_t nc,
    size_t kc,
    const int8_t* restrict a,
    size_t a_stride,
    const void* restrict w,
    ${OUT_T}* restrict c,
    size_t cm_stride,
    size_t cn_stride,
    $if DATATYPE == "QD8_F32":
      const union ${PARAMS_UNION} params[restrict XNN_MIN_ELEMENTS(1)],
      const struct xnn_qd8_quantization_params quantization_params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
    $else:
      const union ${PARAMS_UNION} params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(mr != 0);
  assert(mr <= ${MR});
  assert(nc != 0);
  assert(kc != 0);
  assert(kc % sizeof(int8_t) == 0);
  assert(a != NULL);
  assert(w != NULL);
  assert(c != NULL);

  kc = round_up_po2(kc, 4 * sizeof(int8_t));
  const int8_t* a0 = a;
  ${OUT_T}* c0 = c;
  $for M in range(1, MR):
    const int8_t* a${M} = (const int8_t*) ((uintptr_t) a${M-1} + a_stride);
    ${OUT_T}* c${M} = (${OUT_T}*) ((uintptr_t) c${M-1} + cm_stride);
    $if M % 2 == 0:
      if XNN_UNPREDICTABLE(mr <= ${M}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $elif M + 1 == MR:
      if XNN_UNPREDICTABLE(mr != ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $else:
      if XNN_UNPREDICTABLE(mr < ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    
  $if not SDOT:
    const v128_t vsign_mask = wasm_u8x16_const_splat(UINT8_C(0x80));
  do {
    $if DATATYPE == "QD8_F32":
      $for M in range(MR):
        $if SDOT:
          const v128_t vinput_zero_point${M} = wasm_v128_load32_splat(&quantization_params[${M}].zero_point);
        $else:
          const v128_t vinput_zero_point${M} = wasm_i32x4_splat((int32_t) quantization_params[${M}].zero_point + 128);
      $for N in range(0, NR, 4):
        v128_t vksum${ABC[N:N+4]} = wasm_v128_load(w); w = (const int32_t*) w + 4;
        $for M in range(MR):
          v128_t vacc${M}x${ABC[N:N+4]} = wasm_i32x4_mul(vksum${ABC[N:N+4]}, vinput_zero_point${M});
    $else:
      $for N in range(0, NR, 4):
        v128_t vacc0x${ABC[N:N+4]} = wasm_v128_load(w); w = (const int32_t*) w + 4;
      $for N in range(0, NR, 4):
        $for M in range(1, MR):
          v128_t vacc${M}x${ABC[N:N+4]} = vacc0x${ABC[N:N+4]};
    $if UNROLL:
      $for M in range(MR):
        $for N in range(0, NR, 4):
          v128_t vacc1x${M}x${ABC[N:N+4]} = wasm_i32x4_const(0,0,0,0);

    size_t k = kc;
    while (${"k >= 8 * sizeof(int8_t)" if UNROLL else "k != 0"}) {
      $for M in range(MR):
        $if SDOT:
          const v128_t va${M}x0123 = wasm_v128_load32_splat(a${M});
          $if UNROLL:
            const v128_t va${M}x4567 = wasm_v128_load32_splat((const int8_t*) a${M} + 4);
        $else:
          const v128_t va${M}x0123 = wasm_v128_xor(wasm_v128_load32_splat(a${M}), vsign_mask);
          $if UNROLL:
            const v128_t va${M}x4567 = wasm_v128_xor(wasm_v128_load32_splat((const int8_t*) a${M} + 4), vsign_mask);
        $if UNROLL:
          a${M} += 8;
        $else:
          a${M} += 4;

      $for N in range(0, NR, 4):
        const v128_t vb${ABC[N:N+4]} = wasm_v128_load(w); w = (const int8_t*) w + 16;
      $if UNROLL:
        $for N in range(0, NR, 4):
          const v128_t vb${ABC[N:N+4]}x4567 = wasm_v128_load(w); w = (const int8_t*) w + 16;

      $for M in range(MR):
        $for N in range(0, NR, 4):
          vacc${M}x${ABC[N:N+4]} = wasm_i32x4_relaxed_dot_i8x16_i7x16_add(vb${ABC[N:N+4]}, va${M}x0123, vacc${M}x${ABC[N:N+4]});
      $if UNROLL:
        $for M in range(MR):
          $for N in range(0, NR, 4):
            vacc1x${M}x${ABC[N:N+4]} = wasm_i32x4_relaxed_dot_i8x16_i7x16_add(vb${ABC[N:N+4]}x4567, va${M}x4567, vacc1x${M}x${ABC[N:N+4]});

      $if UNROLL:
        k -= 8 * sizeof(int8_t);
      $else:
        k -= 4 * sizeof(int8_t);
    }

    $if UNROLL:
      $for M in range(MR):
        $for N in range(0, NR, 4):
          vacc${M}x${ABC[N:N+4]} = wasm_i32x4_add(vacc${M}x${ABC[N:N+4]}, vacc1x${M}x${ABC[N:N+4]});
      
      if (k != 0) {
        $for M in range(MR):
          $if SDOT:
            const v128_t va${M}x0123 = wasm_v128_load32_splat(a${M});
          $else:
            const v128_t va${M}x0123 = wasm_v128_xor(wasm_v128_load32_splat(a${M}), vsign_mask);
          a${M} += 4;

        $for N in range(0, NR, 4):
          const v128_t vb${ABC[N:N+4]} = wasm_v128_load(w); w = (const int8_t*) w + 16;

        $for M in range(MR):
          $for N in range(0, NR, 4):
            vacc${M}x${ABC[N:N+4]} = wasm_i32x4_relaxed_dot_i8x16_i7x16_add(vb${ABC[N:N+4]}, va${M}x0123, vacc${M}x${ABC[N:N+4]});

        k -= 4 * sizeof(int8_t);
      }

    $for M in range(MR):
      $for N in range(0, NR, 4):
        vacc${M}x${ABC[N:N+4]} = wasm_f32x4_convert_i32x4(vacc${M}x${ABC[N:N+4]});

    $if DATATYPE == "QD8_F32":
      $for M in range(MR):
        const v128_t vinput_scale${M} = wasm_v128_load32_splat(&quantization_params[${M}].inv_scale);

      $for M in range(MR):
        $for N in range(0, NR, 4):
          vacc${M}x${ABC[N:N+4]} = wasm_f32x4_mul(vacc${M}x${ABC[N:N+4]}, vinput_scale${M});

      $for N in range(0, NR, 4):
        const v128_t vfilter_output_scale${ABC[N:N+4]} = wasm_v128_load(w);
        w = (const float*) w + 4;
      $for M in range(MR):
        $for N in range(0, NR, 4):
          vacc${M}x${ABC[N:N+4]} = wasm_f32x4_mul(vacc${M}x${ABC[N:N+4]}, vfilter_output_scale${ABC[N:N+4]});

      $for N in range(0, NR, 4):
        const v128_t vbias${ABC[N:N+4]} = wasm_v128_load(w);
        w = (const float*) w + 4;
      $for M in range(MR):
        $for N in range(0, NR, 4):
          vacc${M}x${ABC[N:N+4]} = wasm_f32x4_add(vacc${M}x${ABC[N:N+4]}, vbias${ABC[N:N+4]});

      const v128_t vmin = wasm_v128_load64_splat(params->wasmsimd.min);
      $for M in range(MR):
        $for N in range(0, NR, 4):
          vacc${M}x${ABC[N:N+4]} = wasm_f32x4_pmax(vacc${M}x${ABC[N:N+4]}, vmin);

      const v128_t vmax = wasm_v128_load64_splat(params->wasmsimd.max);
      $for M in range(MR):
        $for N in range(0, NR, 4):
          vacc${M}x${ABC[N:N+4]} = wasm_f32x4_pmin(vacc${M}x${ABC[N:N+4]}, vmax);

      if XNN_LIKELY(nc >= ${NR}) {
        $for M in range(MR):
          wasm_v128_store(c${M}, vacc${M}x${ABC[0:4]});
          $for N in range(4, NR, 4):
            wasm_v128_store(c${M} + ${N}, vacc${M}x${ABC[N:N+4]});

        $for M in range(MR):
          a${M} = (const int8_t*) ((uintptr_t) a${M} - kc);

        $for M in range(MR):
          c${M} = (float*) ((uintptr_t) c${M} + cn_stride);

        nc -= ${NR};
      } else {
        $if NR == 8:
          if (nc & 4) {
            $for M in range(MR):
              wasm_v128_store(c${M}, vacc${M}x0123);
              vacc${M}x0123 = vacc${M}x4567;
              c${M} += 4;
          }
        if (nc & 2) {
          $for M in range(MR):
            wasm_v128_store64_lane(c${M}, vacc${M}x0123, 0);
            vacc${M}x0123 = wasm_v64x2_shuffle(vacc${M}x0123, vacc${M}x0123, 1, 1);
            c${M} += 2;
        }
        if (nc & 1) {
          $for M in range(MR):
            wasm_v128_store32_lane(c${M}, vacc${M}x0123, 0);
        }
        nc = 0;
      }
  } while (nc != 0);
}